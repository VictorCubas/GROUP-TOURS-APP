# Generated by Django 4.2 on 2025-10-31 01:31

from django.db import migrations


def migrar_vouchers_legacy(apps, schema_editor):
    """
    Migración de datos para convertir vouchers de reserva a vouchers de pasajero.

    Estrategia:
    1. Los vouchers legacy (por reserva) se desactivan
    2. Se crearán nuevos vouchers automáticamente vía signal cuando los pasajeros cumplan las condiciones:
       - por_asignar=False (datos reales cargados)
       - esta_totalmente_pagado=True (100% pagado)
    """
    Voucher = apps.get_model('comprobante', 'Voucher')

    # Desactivar todos los vouchers legacy (que tienen reserva pero no pasajero)
    vouchers_legacy = Voucher.objects.filter(reserva__isnull=False, pasajero__isnull=True)
    count = vouchers_legacy.count()

    if count > 0:
        vouchers_legacy.update(activo=False)
        print(f"[MIGRACIÓN] Se desactivaron {count} vouchers legacy (por reserva).")
        print(f"[MIGRACIÓN] Los nuevos vouchers se generarán automáticamente cuando los pasajeros paguen el 100%.")


def reverse_migration(apps, schema_editor):
    """
    Reversión: No se puede revertir automáticamente porque se perdería la relación pasajero.
    """
    print("[ADVERTENCIA] No se puede revertir automáticamente esta migración.")
    print("[ADVERTENCIA] Los vouchers legacy desactivados permanecerán desactivados.")


class Migration(migrations.Migration):

    dependencies = [
        ('comprobante', '0002_voucher_pasajero_alter_voucher_codigo_voucher_and_more'),
    ]

    operations = [
        migrations.RunPython(migrar_vouchers_legacy, reverse_migration),
    ]
